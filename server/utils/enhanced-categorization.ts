// Sistema de categoriza√ß√£o aprimorado que integra dicion√°rio, CNPJ e IA
import { 
  MERCHANT_DICTIONARY, 
  findMerchantInDictionary, 
  extractMerchantName, 
  normalizeTransactionText,
  detectTransactionType,
  BUSINESS_TYPE_RULES,
  type MerchantInfo 
} from './merchant-dictionary.js';
import { extractCNPJ, queryCNPJ, categorizeByCNPJ, type CNPJInfo } from './cnpj.js';

export interface EnhancedCategorization {
  merchant: string;
  category: string;
  businessType: string;
  description: string;
  confidence: number;
  sources: string[];
  cnpj?: string;
  paymentMethod?: string;
}

// Pipeline de categoriza√ß√£o h√≠brida (regras ‚Üí dicion√°rio ‚Üí CNPJ ‚Üí fallback)
export async function enhancedCategorization(
  description: string,
  amount: number
): Promise<EnhancedCategorization> {
  
  const sources: string[] = [];
  let result: EnhancedCategorization = {
    merchant: extractMerchantName(description),
    category: 'Outros',
    businessType: 'Outros',
    description: 'Transa√ß√£o n√£o categorizada',
    confidence: 0.4,
    sources: ['fallback']
  };

  // Detecta tipo de transa√ß√£o e m√©todo de pagamento
  const transactionInfo = detectTransactionType(description);
  result.paymentMethod = transactionInfo.method;

  // 1. DICION√ÅRIO DE MERCHANTS (maior prioridade)
  const dictMatch = findMerchantInDictionary(description);
  if (dictMatch) {
    result = {
      merchant: dictMatch.name,
      category: dictMatch.category,
      businessType: dictMatch.businessType,
      description: dictMatch.description,
      confidence: dictMatch.confidence,
      sources: ['dictionary'],
      paymentMethod: result.paymentMethod
    };
    
    console.log(`‚úÖ [DICT] ${description} ‚Üí ${dictMatch.name} (${dictMatch.category})`);
    return result;
  }

  // 2. REGRAS DE NEG√ìCIO DETERMIN√çSTICAS
  const normalized = normalizeTransactionText(description);
  for (const [pattern, rule] of Object.entries(BUSINESS_TYPE_RULES)) {
    if (normalized.includes(pattern)) {
      result = {
        merchant: extractMerchantName(description),
        category: rule.category,
        businessType: rule.businessType,
        description: rule.description,
        confidence: rule.confidence,
        sources: ['business_rules'],
        paymentMethod: result.paymentMethod
      };
      
      console.log(`‚úÖ [RULE] ${description} ‚Üí ${rule.category} via "${pattern}"`);
      sources.push('business_rules');
      break;
    }
  }

  // 3. ENRIQUECIMENTO COM CNPJ (se n√£o encontrou ainda)
  if (result.confidence < 0.85) {
    const cnpj = extractCNPJ(description);
    if (cnpj) {
      try {
        const cnpjInfo = await queryCNPJ(cnpj);
        if (cnpjInfo) {
          const cnpjCategorization = categorizeByCNPJ(cnpjInfo);
          
          result = {
            merchant: cnpjInfo.nome || result.merchant,
            category: cnpjCategorization.category,
            businessType: cnpjCategorization.businessType,
            description: cnpjCategorization.description,
            confidence: 0.85,
            sources: ['cnpj'],
            cnpj: cnpj,
            paymentMethod: result.paymentMethod
          };
          
          console.log(`‚úÖ [CNPJ] ${description} ‚Üí ${cnpjInfo.nome} (${cnpjCategorization.category})`);
          sources.push('cnpj');
        }
      } catch (error) {
        console.log(`‚ùå [CNPJ] Erro ao consultar ${cnpj}:`, error);
      }
    }
  }

  // 4. REGRAS HEUR√çSTICAS ADICIONAIS (para casos n√£o cobertos)
  if (result.confidence < 0.7) {
    const heuristicResult = applyHeuristicRules(description);
    if (heuristicResult) {
      result = {
        ...result,
        ...heuristicResult,
        sources: [...sources, 'heuristic']
      };
      
      console.log(`‚úÖ [HEUR] ${description} ‚Üí ${heuristicResult.category}`);
    }
  }

  result.sources = sources.length > 0 ? sources : ['fallback'];
  
  // Log final do resultado
  console.log(`üéØ [FINAL] "${description}" ‚Üí ${result.merchant} | ${result.category} | ${result.confidence}%`);
  
  return result;
}

// Regras heur√≠sticas para casos n√£o cobertos
function applyHeuristicRules(description: string): Partial<EnhancedCategorization> | null {
  const desc = description.toLowerCase();
  
  // Telecomunica√ß√µes (palavras-chave expandidas)
  if (desc.includes('claro') || desc.includes('vivo') || desc.includes('tim') || desc.includes('oi') ||
      desc.includes('telefonica') || desc.includes('embratel') || desc.includes('webclix') ||
      desc.includes('telecom') || desc.includes('internet') || desc.includes('banda larga')) {
    return {
      category: 'Servi√ßos',
      businessType: 'Telefonia/Internet',
      description: 'Servi√ßos de telefonia e internet',
      confidence: 0.80
    };
  }
  
  // Alimenta√ß√£o (supermercados regionais)
  if (desc.includes('tonin') || desc.includes('medeiros') || desc.includes('reta') ||
      desc.includes('supermercado') || desc.includes('mercado') || desc.includes('hipermercado') ||
      desc.includes('atacadao') || desc.includes('atacad√£o') || desc.includes('assai') || desc.includes('assa√≠')) {
    return {
      category: 'Alimenta√ß√£o',
      businessType: 'Supermercado',
      description: 'Compras em supermercado',
      confidence: 0.80
    };
  }
  
  // Postos de combust√≠vel
  if (desc.includes('posto') || desc.includes('shell') || desc.includes('petrobras') || 
      desc.includes('ipiranga') || desc.includes('raizen') || desc.includes('combustivel') ||
      desc.includes('gasolina') || desc.includes('alcool') || desc.includes('etanol')) {
    return {
      category: 'Transporte',
      businessType: 'Posto de Combust√≠vel',
      description: 'Abastecimento de combust√≠vel',
      confidence: 0.80
    };
  }
  
  // Farm√°cias
  if (desc.includes('farmacia') || desc.includes('drogaria') || desc.includes('drogasil') ||
      desc.includes('pacheco') || desc.includes('pague menos') || desc.includes('medicamento')) {
    return {
      category: 'Sa√∫de',
      businessType: 'Farm√°cia',
      description: 'Medicamentos e produtos de sa√∫de',
      confidence: 0.80
    };
  }
  
  // Aplicativos e servi√ßos digitais
  if (desc.includes('uber') || desc.includes('99') || desc.includes('ifood') || 
      desc.includes('netflix') || desc.includes('spotify') || desc.includes('apple') ||
      desc.includes('google') || desc.includes('microsoft')) {
    return {
      category: 'Servi√ßos',
      businessType: 'Aplicativos/Digital',
      description: 'Servi√ßos digitais e aplicativos',
      confidence: 0.75
    };
  }
  
  // Educa√ß√£o
  if (desc.includes('universidade') || desc.includes('faculdade') || desc.includes('escola') ||
      desc.includes('estacio') || desc.includes('est√°cio') || desc.includes('unopar') ||
      desc.includes('anhanguera') || desc.includes('unip')) {
    return {
      category: 'Educa√ß√£o',
      businessType: 'Institui√ß√£o de Ensino',
      description: 'Educa√ß√£o e cursos',
      confidence: 0.75
    };
  }
  
  return null;
}

// Fun√ß√£o para detectar assinaturas (transa√ß√µes recorrentes)
export function detectSubscription(
  transactions: Array<{ description: string; amount: number; date: string }>
): boolean {
  // Implementa√ß√£o b√°sica - pode ser expandida
  if (transactions.length < 2) return false;
  
  // Verifica se h√° pelo menos 2 transa√ß√µes com valores similares e merchants similares
  const amounts = transactions.map(t => Math.abs(t.amount));
  const avgAmount = amounts.reduce((sum, amt) => sum + amt, 0) / amounts.length;
  const variance = amounts.reduce((sum, amt) => sum + Math.pow(amt - avgAmount, 2), 0) / amounts.length;
  
  // Se a vari√¢ncia √© baixa (valores similares) e h√° pelo menos 2 ocorr√™ncias, considera assinatura
  return variance < (avgAmount * 0.15) && transactions.length >= 2;
}

// Fun√ß√£o para processar lote de transa√ß√µes com categoriza√ß√£o aprimorada
export async function processTransactionBatch(
  transactions: Array<{ description: string; amount: number; date: string }>
): Promise<Array<{ original: any; categorization: EnhancedCategorization }>> {
  const results = [];
  
  for (const transaction of transactions) {
    try {
      const categorization = await enhancedCategorization(
        transaction.description, 
        transaction.amount
      );
      
      results.push({
        original: transaction,
        categorization
      });
      
      // Pequeno delay para n√£o sobrecarregar APIs externas
      await new Promise(resolve => setTimeout(resolve, 100));
      
    } catch (error) {
      console.error('Erro ao categorizar transa√ß√£o:', error);
      results.push({
        original: transaction,
        categorization: {
          merchant: extractMerchantName(transaction.description),
          category: 'Outros',
          businessType: 'Outros',
          description: 'Erro na categoriza√ß√£o',
          confidence: 0.1,
          sources: ['error']
        }
      });
    }
  }
  
  return results;
}